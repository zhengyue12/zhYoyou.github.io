{"meta":{"title":"Yoyou的Blog","subtitle":null,"description":null,"author":"Zheng Yoyou","url":"https://zhengyue12.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-11-01T14:49:08.000Z","updated":"2019-11-01T14:50:48.152Z","comments":true,"path":"categories/index.html","permalink":"https://zhengyue12.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2019-11-01T14:49:37.000Z","updated":"2019-11-02T04:00:00.452Z","comments":true,"path":"about/index.html","permalink":"https://zhengyue12.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-11-01T14:26:59.000Z","updated":"2019-11-01T14:35:29.249Z","comments":true,"path":"tags/index.html","permalink":"https://zhengyue12.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Tomcat提交数据乱码问题","slug":"Tomcat提交数据乱码问题","date":"2020-03-30T14:30:40.000Z","updated":"2020-03-30T14:45:13.197Z","comments":true,"path":"2020/03/30/Tomcat提交数据乱码问题/","link":"","permalink":"https://zhengyue12.github.io/2020/03/30/Tomcat%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/","excerpt":"请求乱码：&emsp;&emsp;GET请求：&emsp;&emsp;&emsp;&emsp;更改server.xml；在8080断口处加上URIEncoding=“UTF-8”&emsp;&emsp;POST请求：&emsp;&emsp;&emsp;&emsp;在第一个获取请求参数之前数值","text":"请求乱码：&emsp;&emsp;GET请求：&emsp;&emsp;&emsp;&emsp;更改server.xml；在8080断口处加上URIEncoding=“UTF-8”&emsp;&emsp;POST请求：&emsp;&emsp;&emsp;&emsp;在第一个获取请求参数之前数值 1request.setCharacterEncoding(&quot;UTF-8&quot;); 响应乱码：1response.setContentType(&quot;text/html;charset=utf-8&quot;);","categories":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://zhengyue12.github.io/categories/Tomcat/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://zhengyue12.github.io/tags/Tomcat/"}]},{"title":"Spring和Jackson版本冲突","slug":"Spring和Jackson版本冲突","date":"2020-03-30T14:29:00.000Z","updated":"2020-03-30T14:54:33.613Z","comments":true,"path":"2020/03/30/Spring和Jackson版本冲突/","link":"","permalink":"https://zhengyue12.github.io/2020/03/30/Spring%E5%92%8CJackson%E7%89%88%E6%9C%AC%E5%86%B2%E7%AA%81/","excerpt":"问题：123456Caused by:java.lang.ClassNotFoundException:com.fasterxml.jackson.databind.exc.InvaliDefinitionException at java.net.URLClassLoader.findClass at java.lang.ClassLoader.loadClass at sun.misc.Launcher$AppClassLoader.loadClass at java.lang.ClassLoader.loadClass ...49more","text":"问题：123456Caused by:java.lang.ClassNotFoundException:com.fasterxml.jackson.databind.exc.InvaliDefinitionException at java.net.URLClassLoader.findClass at java.lang.ClassLoader.loadClass at sun.misc.Launcher$AppClassLoader.loadClass at java.lang.ClassLoader.loadClass ...49more 问题原因：Spring和Jackson版本冲突解决办法：添加对应的依赖，Spring5.x.x对应Jackson1.9.x","categories":[{"name":"Java","slug":"Java","permalink":"https://zhengyue12.github.io/categories/Java/"},{"name":"Spring","slug":"Java/Spring","permalink":"https://zhengyue12.github.io/categories/Java/Spring/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://zhengyue12.github.io/tags/Java/"},{"name":"Spring","slug":"Spring","permalink":"https://zhengyue12.github.io/tags/Spring/"}]},{"title":"Ajax发送PUT请求时引发的血案","slug":"Ajax发送PUT请求时引发的血案","date":"2020-03-30T14:28:38.000Z","updated":"2020-03-30T14:50:49.942Z","comments":true,"path":"2020/03/30/Ajax发送PUT请求时引发的血案/","link":"","permalink":"https://zhengyue12.github.io/2020/03/30/Ajax%E5%8F%91%E9%80%81PUT%E8%AF%B7%E6%B1%82%E6%97%B6%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/","excerpt":"使用ajax直接发送put请求：封装的数据Employ[empId=100, empName=null, gender=null, email=null]问题：&emsp;&emsp;请求体中有数据，&emsp;&emsp;但是Employee对象封装不上；&emsp;&emsp;update tbl_emp where emp_id = 1024;","text":"使用ajax直接发送put请求：封装的数据Employ[empId=100, empName=null, gender=null, email=null]问题：&emsp;&emsp;请求体中有数据，&emsp;&emsp;但是Employee对象封装不上；&emsp;&emsp;update tbl_emp where emp_id = 1024; 原因：&emsp;&emsp;Tomcat：&emsp;&emsp;&emsp;&emsp;1.将请求体中的数据，封装一个map。&emsp;&emsp;&emsp;&emsp;2.requestParameter(“empName”)就会从这个map中取值&emsp;&emsp;&emsp;&emsp;3.SpringMVC封装POJO对象的时候，会把POJO中每个属性的值，request.getParameter(“email”);&emsp;&emsp;AJAX发送PUT请求时：&emsp;&emsp;&emsp;&emsp;PUT请求：请求体中的数据，request.getParameter(“empName”)拿不到&emsp;&emsp;&emsp;&emsp;Tomcat一看是PUT不会封装请求体中的数据为map，只有POST形式的请求才封装请求体为map解决方法：&emsp;&emsp;方法一：发送POST请求，在请求体中加上method字段12345678$.ajax(&#123; url:&quot;$&#123;APP_PATH&#125;/emp/&quot;+$(this).attr(&quot;edit-id&quot;), type:&quot;POST&quot;, data:$(&quot;#empUpdateModal form&quot;).serialize()+&quot;&amp;method=PUT&quot;, success: function (data) &#123; alert(data.msg); &#125;&#125;); &emsp;&emsp;方法二：web.xml中添加过滤器，HttpPutFormContentFilter可以将请求体中的数据重新封装123456789&lt;!-- 解决ajax发送put请求，实体封装失败问题 --&gt;&lt;filter&gt; &lt;filter-name&gt;httpPutFormContentFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.HttpPutFormContentFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;httpPutFormContentFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;","categories":[{"name":"Ajax","slug":"Ajax","permalink":"https://zhengyue12.github.io/categories/Ajax/"},{"name":"Restful","slug":"Ajax/Restful","permalink":"https://zhengyue12.github.io/categories/Ajax/Restful/"}],"tags":[{"name":"Ajax","slug":"Ajax","permalink":"https://zhengyue12.github.io/tags/Ajax/"},{"name":"Restful","slug":"Restful","permalink":"https://zhengyue12.github.io/tags/Restful/"}]},{"title":"【模拟】计算器的改良","slug":"【模拟】计算器的改良","date":"2020-03-30T14:01:00.000Z","updated":"2020-03-30T14:24:07.325Z","comments":true,"path":"2020/03/30/【模拟】计算器的改良/","link":"","permalink":"https://zhengyue12.github.io/2020/03/30/%E3%80%90%E6%A8%A1%E6%8B%9F%E3%80%91%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E6%94%B9%E8%89%AF/","excerpt":"题目描述：NCL是一家专门从事计算器改良与升级的实验室，最近该实验室收到了某公司所委托的一个任务：需要在该公司某型号的计算器上加上解一元一次方程的功能。实验室将这个任务交给了一个刚进入的新手ZL先生。为了很好的完成这个任务，ZL先生首先研究了一些一元一次方程的实例：","text":"题目描述：NCL是一家专门从事计算器改良与升级的实验室，最近该实验室收到了某公司所委托的一个任务：需要在该公司某型号的计算器上加上解一元一次方程的功能。实验室将这个任务交给了一个刚进入的新手ZL先生。为了很好的完成这个任务，ZL先生首先研究了一些一元一次方程的实例： 4+3x=86a-5+1=2-2a-5+12y=0ZL先生被主管告之，在计算器上键入的一个一元一次方程中，只包含整数、小写字母及+、-、=这三个数学符号（当然，符号”─”既可作减号，也可作负号）。方程中并没有括号，也没有除号，方程中的字母表示未知数。编写程序，解输入的一元一次方程，将解方程的结果（精确至小数点后三位）输出至屏幕。你可假设对键入的方程的正确性的判断是由另一个程序员在做，或者说可认为键入的一元一次方程均为合法的，且有唯一实数解。输入格式每个测试文件只包含一组测试数据，每组输入一个字符串，表示一个一元一次方程。输出格式：对于每组输入数据，解方程的结果（精确至小数点后三位）输出至屏幕。输入样例：6a-5+1=2-2a输出格式：a=0.750AC代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;int main() &#123; char input[1000]; //记录未知数X char x; //是否在左，是否为正 int isLeft=1,isPo=1; //项，常数 int alNum=0,diNum=0; //用于计数 int num=0; scanf(&quot;%s&quot;,input); int len=strlen(input); for(int i=0; i&lt;len; ++i)&#123; if(isdigit(input[i]))&#123; num=num*10+(input[i]-&apos;0&apos;); &#125; if(isalpha(input[i]))&#123; x=input[i]; if(num==0)&#123; alNum=alNum+(isPo); //a=2a &#125;else&#123; alNum+=num*isPo*isLeft; &#125; num=0; &#125; if(input[i]==&apos;+&apos;)&#123; diNum+=num*isLeft*isPo; isPo=1; num=0; &#125; if(input[i]==&apos;-&apos;)&#123; diNum+=num*isLeft*isPo; isPo=-1; num=0; &#125; if(input[i]==&apos;=&apos;)&#123; diNum+=num*isLeft*isPo; isLeft=-1; isPo=1; num=0; &#125; &#125; diNum+=num*isLeft*isPo;//a=1 printf(&quot;%c=&quot;,x); printf(&quot;%.3lf&quot;,(double)(-diNum)/(double)alNum); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://zhengyue12.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"模拟","slug":"算法/模拟","permalink":"https://zhengyue12.github.io/categories/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://zhengyue12.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"模拟","slug":"模拟","permalink":"https://zhengyue12.github.io/tags/%E6%A8%A1%E6%8B%9F/"}]},{"title":"【贪心】费用最少","slug":"【贪心】费用最少","date":"2020-03-30T14:01:00.000Z","updated":"2020-03-30T14:24:12.380Z","comments":true,"path":"2020/03/30/【贪心】费用最少/","link":"","permalink":"https://zhengyue12.github.io/2020/03/30/%E3%80%90%E8%B4%AA%E5%BF%83%E3%80%91%E8%B4%B9%E7%94%A8%E6%9C%80%E5%B0%91/","excerpt":"题目描述：小墨老师总是不及时做作业，所以他总有很多的作业要做。每个老师都给了他一个完成作业的最后期限，如果他超过期限交作业，老师就会在他的期末评价中扣分。假设做每一门作业总是要一天。小墨老师希望你能够帮助他安排做作业的一个顺序，以便能够被扣掉的分数最少。","text":"题目描述：小墨老师总是不及时做作业，所以他总有很多的作业要做。每个老师都给了他一个完成作业的最后期限，如果他超过期限交作业，老师就会在他的期末评价中扣分。假设做每一门作业总是要一天。小墨老师希望你能够帮助他安排做作业的一个顺序，以便能够被扣掉的分数最少。 输入格式输入包含了多个测试用例。输入的第一行是一个整数T，代表测试用例的个数。接下来的就是T个测试用例的输入。每个测试用例都从一个正整数N(1≤N≤1000)开始，代表了作业的数目。接下来有2行。第一行包含N个整数，分别代表各个作业提交的最后期限；第二行也有N个整数，即对应于各个作业操过时间提交的扣分。输出格式：对每一个测试用例，应该在一行中输出最小的扣分数。输入样例：233 3 310 5 131 3 16 2 3输出格式：03解题思路：这道题主要是在合理的期限内做分数最高的作业，也就是对作业进行排序。优先扣的分数高的，在分数相同情况下选择期限最短的。AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;struct homework&#123; int endline; int score;&#125;;int cmp(homework h1,homework h2)&#123; if(h1.score!=h2.score)&#123; return h1.score&gt;h2.score; &#125; else &#123; return h1.endline&lt;h2.endline; &#125;&#125;int main() &#123; int T,N; homework h[1001]; int isHave[100001];//用于记录当天是否已有任务 cin&gt;&gt;T; while(T--)&#123; int num=0;//扣分总和 memset(isHave,0,sizeof(isHave)); cin&gt;&gt;N; for(int i=0;i&lt;N;++i) cin&gt;&gt;h[i].endline; for(int i=0;i&lt;N;++i) cin&gt;&gt;h[i].score; sort(h,h+N,cmp); for(int i=0;i&lt;N;++i)&#123; int flag=0; for(int j=h[i].endline;j&gt;0;j--)&#123; if(!isHave[j])&#123; flag=1; isHave[j]=1; break; &#125; &#125; if(!flag)&#123; num+=h[i].score; &#125; &#125; cout&lt;&lt;num&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://zhengyue12.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"贪心","slug":"算法/贪心","permalink":"https://zhengyue12.github.io/categories/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://zhengyue12.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"贪心","slug":"贪心","permalink":"https://zhengyue12.github.io/tags/%E8%B4%AA%E5%BF%83/"}]},{"title":"Docker基本命令","slug":"Docker基本命令","date":"2019-11-30T13:23:10.000Z","updated":"2020-02-27T10:54:26.168Z","comments":true,"path":"2019/11/30/Docker基本命令/","link":"","permalink":"https://zhengyue12.github.io/2019/11/30/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"所在环境：&emsp;&emsp;Linux Centos7 内核版本大于3.10","text":"所在环境：&emsp;&emsp;Linux Centos7 内核版本大于3.10 Docker基本命令：&emsp;&emsp;安装1yum install docker &emsp;&emsp;启动1systemctl start docker &emsp;&emsp;关闭1systemctl stop docker &emsp;&emsp;镜像检索1docker search 关键字 &emsp;&emsp;镜像拉取1docker pull 镜像名:标签号 &emsp;&emsp;查看镜像1docker images &emsp;&emsp;删除镜像1docker rmi 镜像id 容器操作命令：&emsp;&emsp;根据镜像运行容器（-d后台运行，-p新端口号：映射容器内部端口）1docker run --name 自定义容器名 -d -p 新端口:映射端口 镜像名:tag号（默认latest） &emsp;&emsp;列表（-a可以查看所有容器）1docker ps -a &emsp;&emsp;停止容器1docker stop 容器的id &emsp;&emsp;启动容器1docker start 容器的id &emsp;&emsp;删除删除指定容器1docker rm 容器id &emsp;&emsp;容器日志1docker logs 容器id","categories":[{"name":"Docker","slug":"Docker","permalink":"https://zhengyue12.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://zhengyue12.github.io/tags/Docker/"}]},{"title":"Elipse中SpringMVC加上注解没有提示","slug":"Elipse中SpringMVC加上注解没有提示","date":"2019-11-28T11:26:27.000Z","updated":"2020-03-30T14:26:29.636Z","comments":true,"path":"2019/11/28/Elipse中SpringMVC加上注解没有提示/","link":"","permalink":"https://zhengyue12.github.io/2019/11/28/Elipse%E4%B8%ADSpringMVC%E5%8A%A0%E4%B8%8A%E6%B3%A8%E8%A7%A3%E6%B2%A1%E6%9C%89%E6%8F%90%E7%A4%BA/","excerpt":"问题：Elipse中加上SpringMVC相关注解时，没有代码提示","text":"问题：Elipse中加上SpringMVC相关注解时，没有代码提示 解决方法：取消勾选红圈选项","categories":[{"name":"Java","slug":"Java","permalink":"https://zhengyue12.github.io/categories/Java/"},{"name":"SpringMVC","slug":"Java/SpringMVC","permalink":"https://zhengyue12.github.io/categories/Java/SpringMVC/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://zhengyue12.github.io/tags/Java/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://zhengyue12.github.io/tags/SpringMVC/"}]},{"title":"Liunx常用命令（三）","slug":"Liunx学习笔记（三）","date":"2019-11-11T02:32:33.000Z","updated":"2019-11-11T03:00:51.955Z","comments":true,"path":"2019/11/11/Liunx学习笔记（三）/","link":"","permalink":"https://zhengyue12.github.io/2019/11/11/Liunx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/","excerpt":"more -- 显示文件内容，带分页","text":"more -- 显示文件内容，带分页 – more 文件名 [分页，空格下一页，pgup上一页] less -- 显示文件内容带分页 grep -- 查询文件内容 – grep “关键词” 文件名 [查询] | -- 管道命令，把上一个命令给|后的一个命令执行","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhengyue12.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhengyue12.github.io/tags/Linux/"}]},{"title":"Liunx常用命令（二）","slug":"Liunx学习笔记（二）","date":"2019-11-11T01:46:33.000Z","updated":"2019-11-11T03:00:45.213Z","comments":true,"path":"2019/11/11/Liunx学习笔记（二）/","link":"","permalink":"https://zhengyue12.github.io/2019/11/11/Liunx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"mkdir -- 创建空目录","text":"mkdir -- 创建空目录 rmdir -- 删除空目录 touch -- 建立空文件 cp -- 复制命令 – cp file1 dir1 【复制文件到指定目录下】– cp -r dir1 dir2 【递归复制目录（复制子目录信息）】 mv -- 移动文件和改文件名 rm -- 删除文件和目录 – rm -rf* 【删除所有内容（包括目录和文件），r递归，f强制】 ln -- 建立符号连接 – -s 源目标– -s /etc/inittab inittab 【inittab指向实际文件/etc/inittab】","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhengyue12.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhengyue12.github.io/tags/Linux/"}]},{"title":"Linux常用命令（一）","slug":"Linux学习笔记（一）","date":"2019-11-11T00:44:51.000Z","updated":"2019-11-11T02:59:55.480Z","comments":true,"path":"2019/11/11/Linux学习笔记（一）/","link":"","permalink":"https://zhengyue12.github.io/2019/11/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"init [0123456] -- 指定运行级别 &emsp;&emsp;–0：关机&emsp;&emsp;–1：单用户","text":"init [0123456] -- 指定运行级别 &emsp;&emsp;–0：关机&emsp;&emsp;–1：单用户 &emsp;&emsp;–2：多用户状态没有网络服务&emsp;&emsp;–3*：多用户状态有网络服务&emsp;&emsp;–4：系统未使用保留给用户&emsp;&emsp;–5*：图形界面&emsp;&emsp;-6：系统重启&emsp;&emsp; 修改默认运行级别：vi /etc/inittab，进入查看命令 pwd -- 显示当前工作目录 cd -- 改变目录 ls -- 列出文件和目录 &emsp;&emsp;– -a：显示隐藏文件&emsp;&emsp;– -l：显示长列表格式&emsp;&emsp;– -al：显示长列表格式隐藏文件","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhengyue12.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhengyue12.github.io/tags/Linux/"}]},{"title":"SpringMVC的PUT、DELETE响应问题","slug":"SpringMVC的PUT、DELETE响应问题","date":"2019-11-10T14:25:22.000Z","updated":"2020-03-30T14:26:56.450Z","comments":true,"path":"2019/11/10/SpringMVC的PUT、DELETE响应问题/","link":"","permalink":"https://zhengyue12.github.io/2019/11/10/SpringMVC%E7%9A%84PUT%E3%80%81DELETE%E5%93%8D%E5%BA%94%E9%97%AE%E9%A2%98/","excerpt":"","text":"浏览器不响应，控制台响应解决方法：1）tomcat更换至7及以下版本2）","categories":[{"name":"-Java - SpringMVC","slug":"Java-SpringMVC","permalink":"https://zhengyue12.github.io/categories/Java-SpringMVC/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://zhengyue12.github.io/tags/Java/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://zhengyue12.github.io/tags/SpringMVC/"}]},{"title":"二级MS Office公共基础知识点整理","slug":"二级MS Office公共基础题解析整理","date":"2019-11-10T11:45:01.000Z","updated":"2019-11-14T04:38:38.873Z","comments":true,"path":"2019/11/10/二级MS Office公共基础题解析整理/","link":"","permalink":"https://zhengyue12.github.io/2019/11/10/%E4%BA%8C%E7%BA%A7MS%20Office%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E9%A2%98%E8%A7%A3%E6%9E%90%E6%95%B4%E7%90%86/","excerpt":"一：计算机的前世今生：&emsp;1.世界上第一台计算机，1946年，冯·诺依曼，ENIAC（电子数字积分计算机）。该计算机原理要点：二进制、存储程序。硬件五大基本构建：运算器、控制器、存储器、输入设备、输出设备。","text":"一：计算机的前世今生：&emsp;1.世界上第一台计算机，1946年，冯·诺依曼，ENIAC（电子数字积分计算机）。该计算机原理要点：二进制、存储程序。硬件五大基本构建：运算器、控制器、存储器、输入设备、输出设备。 &emsp;2.计算机主要元件发展顺序：电子管–&gt;晶体管–&gt;中小规模集成电路–&gt;大规模、超大规模集成电路。&emsp;3.计算机最早应用领域：数值计算。&emsp;4.计算机辅助英文缩写和中文对照：计算机辅助设计-（CAD），计算机辅助制造-（CAM），计算机辅助教育-（CAI），计算机辅助技术-（CAT），计算机集成制造系统（CIMS）。 二：信息的表示与存储：&emsp;1.汉字的内码=汉字的国际码+8080H&emsp;2.-内码：计算机内部对汉字进行存储、处理的汉字代码。–外码：通过键盘输入的内容。–地址码：字库中每一个汉字的字形都有一个地址码。 三：计算机硬件系统：&emsp;1.CPU主要的两大部件：运算器（性能指标：字长、运算速度。通常单位：MIPS。基本功能：接收数据并完成程序指令指定的基于二进制数的算术运算符或逻辑运算。）、控制器（基本功能：控制机器各个部件协调一致工作。）。&emsp;2.主频是用来表示CPU内核工作的时钟频率。&emsp;3.光盘分为两类：只读型光盘（CD-RAM、DVD-RAM）、可记录型光盘。&emsp;4.存储器中，存取速度最快的是：RAM。&emsp;5.既可作为输入设备，也能作为输出设备的是调制解调器、光盘刻录机、磁盘驱动器。&emsp;6.现代计算机普遍采用总线结构（数据总线，控制总线，地址总线），与数据总线位数对应相同的部件是CPU。&emsp;7.USB 2.0接口理论最快传输速率480Mbps，USB 3.0 –&gt; 5.0Gbps，USB 3.1 –&gt; 10Gbps。 四：计算机软件系统：&emsp;1.计算机硬件能直接识别、执行的语言是机器语言。&emsp;2.程序设计语言三类：机器语言、汇编语言、高级语言（VB、C、Java）。&emsp;3.操作系统：Liunx（开源）、Windows、Mac&emsp;4.在软件开发中，需求分析阶段产生的主要文档是软件需求规格说明书，可以使用的工具DFD图。 五：多媒体技术简介&emsp;1.音频数据量(字节B)=采样时间(s)采样频率(Hz)量化位数(二进制位b)*声道数/8&emsp;2.存储空间最大的声音文件格式是WAV波形文字；图形文件格式是Bmp。 六：计算机病毒及防治&emsp;1.先于或随着操作系统的系统文件装入内存储器，从而获取计算机特定控制权并进行传染和破坏的病毒是引导区型病毒。&emsp;2.计算机病毒是一种具有繁殖能力的特殊程序。 七：Internet基础及应用&emsp;1.计算机网络最突出的优点是实现资源共享和快速通信。&emsp;2.环形拓扑结构是将网络的各个节点通过中继器连接成一个闭合环路。&emsp;3.以太网的拓扑结构总线型。&emsp;4.WiFi上网，拓扑结构为星形拓扑。&emsp;5.计算机连接局域网，至少具有网卡。组建内部办公网络，需要路由器。&emsp;6.Internet完成从域名到IP地址或从IP地址到域名的转换服务的是DNS。&emsp;7.IP地址规范：四段，每段范围（0~255）。&emsp;8.Internet环境中的防火墙建立在内部网络与外部网络的交叉点。 八：数据结构&emsp;1.栈先进后出（弹夹），队列先进先出（排队）。&emsp;2.面向对象方法中，对象基本特点：标识唯一性、分类性、多态性、封装性、模块独立性。&emsp;3.算法的有穷性是指算法程序的运行时间是有限的。&emsp;4.程序流程图中带有箭头的线段表示的是控制流。&emsp;5.链式存储结构既可以针对线性结构也可以针对非线性结构。&emsp;6.树中总结点数=不同度节点数目相加=度数*对应节点数和+1 &emsp;7.任意二叉树中度为2的二叉树结点比度为0的少1。&emsp;8.深度为k的二叉树最多有2^k-1个结点。二叉树第m层最多有2^(m-1)个结点。&emsp;9.满二叉树每一层都有两个子节点。知识点仅结合资料整理而成，或有疏漏，仅供参考","categories":[{"name":"计算机二级","slug":"计算机二级","permalink":"https://zhengyue12.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/"}],"tags":[{"name":"计算机二级","slug":"计算机二级","permalink":"https://zhengyue12.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/"},{"name":"MS Office","slug":"MS-Office","permalink":"https://zhengyue12.github.io/tags/MS-Office/"}]},{"title":"MongoDB连接报错shutting down with code:100","slug":"MongoDB连接报错……code-100","date":"2019-11-02T04:12:38.000Z","updated":"2019-11-30T15:08:31.449Z","comments":true,"path":"2019/11/02/MongoDB连接报错……code-100/","link":"","permalink":"https://zhengyue12.github.io/2019/11/02/MongoDB%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99%E2%80%A6%E2%80%A6code-100/","excerpt":"连接MongoDB时，报错如下：2018-07-20T22:42:08.645+0800 I CONTROL [initandlisten] now exiting2018-07-20T22:42:08.645+0800 I CONTROL [initandlisten] shutting down with code:100","text":"连接MongoDB时，报错如下：2018-07-20T22:42:08.645+0800 I CONTROL [initandlisten] now exiting2018-07-20T22:42:08.645+0800 I CONTROL [initandlisten] shutting down with code:100 原因：mongodb非正常关闭解决方法：删除db目录下的mongod.lock文件即可.","categories":[{"name":"数据库","slug":"数据库","permalink":"https://zhengyue12.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MongoDB","slug":"数据库/MongoDB","permalink":"https://zhengyue12.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://zhengyue12.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://zhengyue12.github.io/tags/MongoDB/"}]},{"title":"MySQL名字包含特殊符号的库无法创建或删除","slug":"MySQL名字包含特殊符号的库无法创建或删除","date":"2019-11-02T04:03:15.000Z","updated":"2019-11-30T15:10:12.556Z","comments":true,"path":"2019/11/02/MySQL名字包含特殊符号的库无法创建或删除/","link":"","permalink":"https://zhengyue12.github.io/2019/11/02/MySQL%E5%90%8D%E5%AD%97%E5%8C%85%E5%90%AB%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%BA%93%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA%E6%88%96%E5%88%A0%E9%99%A4/","excerpt":"","text":"解决方法库名用`(Esc下的键)符号包裹，效果如下","categories":[{"name":"数据库","slug":"数据库","permalink":"https://zhengyue12.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://zhengyue12.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://zhengyue12.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://zhengyue12.github.io/tags/MySQL/"}]},{"title":"使用Hexo+Github搭建属于自己的个人博客","slug":"使用Hexo-Github搭建属于自己的个人博客","date":"2019-11-01T15:18:46.000Z","updated":"2019-11-30T15:09:46.307Z","comments":true,"path":"2019/11/01/使用Hexo-Github搭建属于自己的个人博客/","link":"","permalink":"https://zhengyue12.github.io/2019/11/01/%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"使用Hexo+Github搭建属于自己的个人博客（一）前期准备&emsp;&emsp;Node.js（node -v， npm -v 检测安装）&emsp;&emsp;Git&emsp;&emsp;sublime（文本编辑器仅供参考，凭个人喜好选择）&emsp;&emsp;注册GitHub，新建一个仓库，仓库名以（xxx.github.io）为标准","text":"使用Hexo+Github搭建属于自己的个人博客（一）前期准备&emsp;&emsp;Node.js（node -v， npm -v 检测安装）&emsp;&emsp;Git&emsp;&emsp;sublime（文本编辑器仅供参考，凭个人喜好选择）&emsp;&emsp;注册GitHub，新建一个仓库，仓库名以（xxx.github.io）为标准 （二）安装Hexo&emsp;&emsp;在自己喜欢的目录下新建一个放置博客文件夹的目录&emsp;&emsp;使用Git进入到此目录，执行以下命令1$ npm install -g hexo-cli （三）初始化博客&emsp;&emsp;初始化1$ npm init 博客名 &emsp;&emsp;进入到新创建的博客目录下，安装相关的依赖1$ npm install &emsp;&emsp;此时已经创建完毕，可以输入以下命令在网页上进行预览1$ hexo s -p未被占用端口号 (ctral+c结束) （四）部署到GitHub&emsp;&emsp;安装hexo-deployer-git 插件1$ npm install hexo-deployer-git --save &emsp;&emsp;使用sublime打开博客文件夹，找到_config.yml文件，修改以下内容 &emsp;&emsp;清理1$ hexo clean &emsp;&emsp;生成1$ hexo g &emsp;&emsp;提交1$ hexo d &emsp;&emsp;配置完成，即可拥有自己的博客网址(xxx.github.io)","categories":[{"name":"Blog","slug":"Blog","permalink":"https://zhengyue12.github.io/categories/Blog/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://zhengyue12.github.io/tags/Blog/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-31T03:35:22.563Z","updated":"2019-11-28T11:33:18.677Z","comments":true,"path":"2019/10/31/hello-world/","link":"","permalink":"https://zhengyue12.github.io/2019/10/31/hello-world/","excerpt":"Welcome to My Blog!!Zhengyoyou记录平时遇到的问题","text":"Welcome to My Blog!!Zhengyoyou记录平时遇到的问题","categories":[],"tags":[]}]}